#!/usr/bin/python

import higu
import cherrypy
import sys
import os

CSS="""
#sidebar{
    float:left;
}

#info{
    overflow:auto;
}

#list{
    overflow:auto;
}

#main{
    float:left;
    overflow:auto;
}

#right{
    float:left;
    overflow:auto;
    visibility:hidden;
}

.picture{
    float:left;
}
"""

JAVASCRIPT="""
<!--

right_visible = 0;
selected=-1;
list_filelist = new Array();
viewer_filelist = list_filelist;

function init() {
    width = window.innerWidth;
    height = window.innerHeight;

    info = document.getElementById( 'info' );
    list = document.getElementById( 'list' );
    main = document.getElementById( 'main' );

    sidebar_w = width / 10;
    if( sidebar_w < 250 ) sidebar_w = 250;

    info.style.width = sidebar_w;
    list.style.width = sidebar_w;
    info.style.height = (height - 60)/2;
    list.style.height = (height - 60)/2;

    main.style.width = width - 20 - sidebar_w;
    main.style.height = height - 60;
}

function clickfile( id, reset ) {
    if( selected >= 0 ) {
        sdiv = document.getElementById( 'list_div' + selected );
        if( sdiv ) {
            sdiv.style.background = '';
        }
    }

    if( reset ) {
        form = document.forms["list"];

        for( i = 0; i < form.elements.length; i++ ) {
            e = form.elements[i];
            if( e.type == 'checkbox' ) {
                e.checked = 0;
            }
        }
    }

    selected = id;
    sdiv = document.getElementById( 'list_div' + id );
    sdiv.style.background = 'yellow';
    eval( 'document.forms["list"].list_check' + selected ).checked = true;

    viewer_filelist = list_filelist;
    load( 'viewer', '/view?id=' + id );
    load( 'info', '/info?id=' + id );
}

function nextfile( id, dir ) {
    current = -1;

    form = document.forms["list"];

    if( form.elements.length == 0 ) return;

    for( i = 0; i < form.elements.length; i++ ) {
        e = form.elements[i];
        if( parseInt( e.value ) == id ) {
            current = i;
            break;
        }
    }

    if( current < 0 ) {
        next = 0;
    } else {
        next = current + dir;
        if( next < 0 || next >= form.elements.length ) {
            return;
        }
    }

    clickfile( parseInt( form.elements[next].value ), true );
}

function open_view( view ) {
    if( view == 'viewer2' ) {
        right = document.getElementById( 'right' );
        alert( right.style.visibility );
        if( !right_visible ) {
            main = document.getElementById( 'main' );
            main.style.width = (window.innerWidth - 300)/2;
            right.style.width = (window.innerWidth - 300)/2;
            right.style.visibility = 'visible';
            right_visible = 1;
        }
        return right;
    } else if( view == 'viewer' ) {
        return document.getElementById( 'main' );
    } else if( view == 'main' ) {
        main = document.getElementById( 'main' );
        right = document.getElementById( 'right' );
        if( right_visible ) {
            right.style.visibility = 'hidden';
            main.style.width = window.innerWidth - 300;
            right_visible = 0;
        }
        return main
    } else {
        return document.getElementById( view );
    }
}

function close_view( view ) {
    if( view == 'viewer2' && right_visible ) {
        right.style.visibility = 'hidden';
        main.style.width = window.innerWidth - 300;
        right_visible = 0;
    }
}

function load( div, page ) {
    r = null;
    if( !window.XMLHttpRequest ) {
        alert( "Unsupported browser" );
        return;
    }

    r = window.XMLHttpRequest();
    r.onreadystatechange = function() {
        if( this.readyState != 4 ) return;

        if( this.status != 200 ) {
            open_view( 'viewer' ).innerHTML = this.responseText;
            return;
        }

        open_view( this.div ).innerHTML = this.responseText;
    }

    r.div = div;

    open_view( div ).innerHTML = '<h1>Loading...</h1>';

    r.open( 'GET', page, true )
    r.send( null );
}

function resize_image( im ) {
    if( right_visible ) {
        max_width = (window.innerWidth - 300) / 2;
    } else {
        max_width = window.innerWidth - 300;
    }

    max_height = window.innerHeight - 100;

    if( im.width > max_width ) {
        h = im.height * max_width / im.width;
        if( h > max_height ) {
            im.height = max_height;
        } else {
            im.width = max_width;
        }
    } else if( im.height > max_height ) {
        im.height = max_height;
    }
}

function make_group( type ) {
    this_img = document.forms[0].fid.value;
    parent   = parent.viewer.document.forms[0].fid.value;
    action = "group|" + type + " " + parent;

    location.href = "/view?id=" + this_img + "&secondary=1&action=" + action;
}
//-->
"""

INDEX="""
<html><head><title>NextGen UI</title></head>
<body onload="init()">
<script language="javascript">""" + JAVASCRIPT + """</script>
<style type="text/css">""" + CSS + """</style>
<div id='header'>
    <form onsubmit="load( 'list', '/list?mode=tags&tags=' + document.forms[0].tags.value ); return false;">
    <a href="javascript:load( 'list', '/list?mode=all' )">all</a> /
    <a href="javascript:load( 'list', '/list?mode=untagged' )">untagged</a> /
    <a href="javascript:load( 'main', '/taglist' )">taglist</a> /
    <a href="javascript:load( 'main', '/admin' )">admin</a> /
    <input type="text" name="tags"/></form>
</div>
<div id='sidebar'>
    <div id='info'></div>
    <div id='list'></div>
</div>
<div id='main'>
</div>
<div id='right'>
</div>
"""


class Server:

    def __init__( self, database_path = None ):

        self.db_path = database_path

    def open_db( self ):

        if( self.db_path == None ):
            return higu.init_default()
        else:
            return higu.Database( self.db_path )

    def index( self ):

        return INDEX

    def admin( self, action = None, **args ):

        s = ''

        if( action == 'rename' ):
            if( args['rntag'] != '' and args['rnnew'] != '' ):
                db = self.open_db()
                db.rename_tag( args['rntag'], args['rnnew'] )
                db.commit()

        s += '<h2>Rename tag</h2>'
        s += '<form>'
        s += '<input type="hidden" name="action" value="rename"/>Tag: <input type="text" name="rntag"/> New: <input type="text" name="rnnew"/> <input type="submit">'
        s += '</form>'

        return s

    def view( self, id = None ):

        if( id == None ):
            raise cherrypy.HTTPError( 404 )
        try:
            id = int( id )
        except:
            raise cherrypy.HTTPError( 400 )

        db = self.open_db()
        f = db.get_file_by_id( id )
        p = f.get_path()
        db.close()

        if( p == None ):
            return 'Image not available<br/>'
        else:
            return '<img src="/img?id=%d" class="picture" onload="resize_image( this )" onclick="nextfile( %d, 1 )"/><br/>' % ( id, id )

    def info( self, id = None, action = None ):

        if( id == None ):
            raise cherrypy.HTTPError( 404 )
        try:
            id = int( id )
        except:
            raise cherrypy.HTTPError( 400 )

        db = self.open_db()
        f = db.get_file_by_id( id )

        # Process an action
        if( action != None ):
            cmd, parm = action.split( '|' )
            parms = parm.split( ' ' )
            if( cmd == 'tag' ):
                for t in parms:
                    f.tag( t )
            elif( cmd == 'untag' ):
                f.untag( parm )
            elif( cmd == 'rempar' ):
                f.set_parent( None )
            elif( cmd == 'group' ):
                parms = map( lambda x: int( x ), parms )

                if( parms[0] == 0 ):
                    f.set_parent( higu.File( f.db, parms[1] ) )
                if( parms[0] == 1 ):
                    f.set_varient_of( higu.File( f.db, parms[1] ) )
                if( parms[0] == 2 ):
                    f.set_duplicate_of( higu.File( f.db, parms[1] ) )

            db.commit()

        s = ''

        varient = f.is_varient()
        duplicate = f.is_duplicate()
        parent = f.get_parent()

        if( 0 ):
            s += """<a href="javascript:close_view( 'viewer2' )">Close</a> / """
            if( parent != None ):
                s += 'Has parent'
            else:
                s += '<a href=\'javascript:make_group( 0 )\'>Collection</a> / '
                s += '<a href=\'javascript:make_group( 1 )\'>Varient</a> / '
                s += '<a href=\'javascript:make_group( 2 )\'>Duplicate</a>'
        else:
            if( varient ):
                name = parent.get_name()

                s += 'Varient: <a href="/view?id=%d" target="viewer">%s</a> ' \
                        % ( parent.get_id(), name )
                s += '(<a href="/view?id=%d&action=rempar|">clear</a>)' \
                        % ( f.get_id() )
            elif( duplicate ):
                name = parent.get_name()

                s += 'Duplicate: <a href="/view?id=%d" target="viewer">%s</a> ' \
                        % ( parent.get_id(), name )
                s += '(<a href="/view?id=%d&action=rempar|">clear</a>)' \
                        % ( f.get_id() )
            elif( parent != None ):
                name = parent.get_name()

                s += 'Collection: <a href="/view?id=%d" target="viewer">%s</a> ' \
                        % ( parent.get_id(), name )
                s += '(<a href="/view?id=%d&action=rempar|">clear</a>)' \
                        % ( f.get_id() )

            s += '<h2>Tags</h2>'

            tags = f.get_tags()

            s += '<ul>'
            for t in tags:
                s += """<li>%s (<a href="javascript:load( 'info', '/info?id=%d&action=untag|%s' )">del</a>)</li>""" \
                        % ( t, f.get_id(), t )
            s += """<li><form onsubmit="load( 'info', '/info?id=%d&action=tag|' + this.tag.value ); return false;"><input type="text" name="tag"/></form></li>""" \
                        % ( f.get_id() )
            s += '</ul>'

            s += '<h2>Names</h2>'

            names = f.get_names()

            s += '<ul>'
            for n in names:
                s += '<li>%s</li>' % ( n )
            s += '</ul>'

            dups = []
            vars = []
            coll = []

            for c in f.child_iterator():

                if( c.is_duplicate() ):
                    dups.append( c )
                elif( c.is_varient() ):
                    vars.append( c )
                else:
                    coll.append( c )

            if( len( dups ) > 0 ):
                s += '<h2>Duplicates</h2>'

                s += '<ul>'
                for g in dups:
                    name = g.get_name()
                    s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                    % ( g.get_id(), name, )
                s += '</ul>'

            if( len( vars ) > 0 ):
                s += '<h2>Varients</h2>'

                s += '<ul>'
                for g in vars:
                    name = g.get_name()
                    s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                    % ( g.get_id(), name, )
                s += '</ul>'

            if( len( coll ) > 0 ):
                s += '<h2>Collection</h2>'

                s += '<ul>'
                s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                        % ( f.get_id(), f.get_name(), )
                for g in coll:
                    s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                            % ( g.get_id(), g.get_name(), )
                s += '</ul>'

            if( parent != None and not duplicate and not varient ):
                coll = []

                for c in parent.child_iterator():

                    if( not c.is_duplicate() and not c.is_varient() ):
                        coll.append( c )

                s += '<h2>Collection</h2>'

                s += '<ul>'
                s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                        % ( parent.get_id(), parent.get_name(), )
                for g in coll:
                    s += '<li><a href="/view?id=%d" target="viewer">%s</a></li>' \
                            % ( g.get_id(), g.get_name(), )
                s += '</ul>'

        db.close()

        return s

    def list( self, mode = None, tags = None ):

        db = self.open_db()
        s = []

        if( mode == 'untagged' ):
            files = db.lookup_files_by_tags_with_names( [], strict = True )
        elif( mode == 'tags' ):
            if( tags[0] == '$' ):
                strict = True
                tags = tags[1:]
            else:
                strict = False

            ls = tags.split( ' ' )
            require = []
            add = []
            sub = []
            for tag in ls:
                if( len( tag ) == 0 ):
                    continue
                elif( tag[0] == '?' ):
                    add.append( tag[1:] )
                elif( tag[0] == '!' ):
                    sub.append( tag[1:] )
                else:
                    require.append( tag )

            files = db.lookup_files_by_tags_with_names( require, add, sub, strict )
        else:
            files = db.lookup_files_by_tags_with_names( [] )

        totidx = len( s )
        s.append( 'Total: %d files<br/>' )
        s.append( '<form name="list">' )

        c = 0
        for f in files:
            c += 1

            name = f[1]
            f = f[0]

            id = f.get_id()
            s.append( ("""<div id="list_div%d"><input type="checkbox" name="list_check%d" """
                    + """value="%d" onclick="javascript:clickfile( %d, false )"/>"""
                    + """<a href="javascript:clickfile( %d, true )">%s</a></div>""")
                    % ( id, id, id, id, id, name, ) )
        s.append( '</ul>' )

        s[totidx] = s[totidx] % ( c )

        return ''.join( s )

    def taglist( self ):

        db = self.open_db()
        s = ''

        tags = db.all_tags()

        s += '<ul>'
        for t in tags:
            s += """<li><a href="javascript:load( 'list', '/list?mode=tags&tags=%s' )">%s</a></li>""" \
                    % ( t, t,)
        s += '</ul>'

        return s

    def img( self, id = None ):

        db = self.open_db()

        if( id == None ):
            raise cherrypy.HTTPError( 404 )

        try:
            id = int( id )
        except:
            raise cherrypy.HTTPError( 400 )

        f = db.get_file_by_id( id )
        p = f.get_path()

        if( p == None ):
            raise cherrypy.HTTPError( 404 )

        name = os.path.split( p )[-1]
        ext = name[name.rindex( '.' )+1:]

        name = f.get_name()

        db.close()

        return cherrypy.lib.static.serve_file( p, 'image/' + ext, \
                'filename=%s' % ( name )  )

    index.exposed = True
    view.exposed = True
    info.exposed = True
    list.exposed = True
    taglist.exposed = True
    img.exposed = True
    admin.exposed = True

if( __name__ == '__main__' ):

    if( len( sys.argv ) > 1 ):
        cherrypy.quickstart( Server( sys.argv[1] ) )
    else:
        cherrypy.quickstart( Server() )

# vim:sts=4:et:sw=4
